plugins {
    id 'jacoco'
    id 'java-library'
}

Properties env = new Properties()
File subPropertiesFile = new File("$projectDir/env.properties")
subPropertiesFile.withInputStream {
    env.load(it)
}

def profiles = (project.hasProperty('profiles')
        ? project.property('profiles')
        : env.DEFAULT_LOCAL_SPRING_PROFILES).split(",")

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'

    dependencies {
        implementation platform(project(":bom"))
        implementation project(':libs:errors')
        implementation project(':libs:components:components-shared')
        implementation project(':libs:components:components-crud')
        implementation project(':libs:components:components-search')
        implementation project(':libs:components')
        annotationProcessor project(':libs:codegen')

        testImplementation project(':libs:components:components-testing')
        testAnnotationProcessor project(':libs:components:components-testing')

        testImplementation 'org.testcontainers:junit-jupiter'

        //  API documentation
        implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui"
        implementation "org.springdoc:springdoc-openapi-starter-webmvc-api"

        implementation 'org.springframework.boot:spring-boot-starter-validation'
        testImplementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        testAnnotationProcessor "org.mapstruct:mapstruct-processor"
        testImplementation "io.rest-assured:spring-mock-mvc"
        testImplementation "org.hamcrest:hamcrest-all"
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.testcontainers:junit-jupiter'
        implementation "org.hibernate.orm:hibernate-jpamodelgen"
        implementation "org.modelmapper:modelmapper"
        developmentOnly 'org.springframework.boot:spring-boot-devtools'

        implementation "org.apache.commons:commons-collections4"
        implementation "org.apache.commons:commons-lang3"
        testAnnotationProcessor "org.apache.commons:commons-compress"

        annotationProcessor 'com.google.code.findbugs:jsr305'
        testAnnotationProcessor 'com.google.code.findbugs:jsr305'

        // 	DATABASE:
        if (profiles.contains("h2")) {
            runtimeOnly 'com.h2database:h2'
        }

        if (profiles.contains("postgres")) {
            runtimeOnly 'org.postgresql:postgresql'
            testImplementation 'org.testcontainers:testcontainers'
            testImplementation "org.testcontainers:postgresql"
        }

        if (profiles.contains("liquibase")) {
            implementation 'org.liquibase:liquibase-core'
        }
    }

    bootRun {
        args = ["--spring.profiles.active=${profiles.join(",")}"]
    }
}