plugins {
}

Properties env = new Properties()
File subPropertiesFile = new File("$projectDir/env.properties")
subPropertiesFile.withInputStream {
    env.load(it)
}

def profiles = (project.hasProperty('profiles')
        ? project.property('profiles')
        : env.DEFAULT_LOCAL_SPRING_PROFILES).split(",")

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:$TESTCONTAINERS_VERSION"
    }
}

dependencies {
    annotationProcessor project(':examples:examples-shared')
    implementation project(':examples:examples-shared')
    implementation project(':components:components-crud')
    implementation project(':commons')
    implementation project(':errors')
    api project(':components:components-testing')
    testImplementation project(':components:components-testing')
    testAnnotationProcessor project(':components:components-testing')


    testImplementation 'org.testcontainers:junit-jupiter'

    // 	DATABASE:
    if (profiles.contains("h2")) {
        runtimeOnly 'com.h2database:h2'
    }

//    if (profiles.contains("postgres")) {
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation "org.testcontainers:postgresql"
//    }

    if (profiles.contains("liquibase")) {
        implementation 'org.liquibase:liquibase-core'
    }

}

tasks.named('test') {
    useJUnitPlatform()
}

bootRun {
    args = ["--spring.profiles.active=${profiles.join(",")}"]
}

tasks.named('test') {
    useJUnitPlatform()
    systemProperty 'spring.profiles.active', "${profiles.join(",")}"
    testLogging {
        outputs.upToDateWhen { false }
        showStandardStreams = true
    }
}