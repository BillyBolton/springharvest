// https://dev.to/mfvanek/creation-and-usage-of-bom-in-gradle-ca1#:~:text=Creating%20a%20BOM%20in%20Gradle,full%20example%20is%20here)%3A

plugins {
    id 'idea'
    id 'io.spring.dependency-management'
    id 'jacoco'
    id 'jacoco-report-aggregation'
    id 'java-platform'
    id "maven-publish"
    id 'org.sonarqube'
    id 'org.springframework.boot'
    id 'signing'
}

javaPlatform {
    allowDependencies()
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/billybolton/springharvest")
            credentials {
                username = project.findProperty("GPR_USER") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("GPR_KEY") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifactId = 'dependency-management-bom' // This will be used as part of the name of the generated POM file
            from(components.javaPlatform)
            pom {
                packaging = "bom"
                name = project.getName()
                description = 'Bill of materials for  SpringHarvest libraries'
                url = 'https://github.com/billybolton/springharvest'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'billybolton'
                        name = 'Billy Bolton'
                        email = 'billybolton16@gmail.com'
                        url = "https://www.github.com/billybolton"
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/billybolton/springharvest.git'
                    developerConnection = 'scm:git:ssh://github.com/billybolton/springharvest.git'
                    url = 'https://github.com/billybolton/springharvest/tree/master'
                }
            }
        }
    }
}

tasks.withType(PublishToMavenLocal).all {
    doLast {
        def pomFile = file("$buildDir/publications/gpr/pom-default.xml")
        def newPomFile = file("$buildDir/publications/gpr/springharvest-bom.xml")
        if (pomFile.exists()) {
            pomFile.renameTo(newPomFile)
        }
    }
}

var APACHE_COMMONS_COLLECTIONS_VERSION = "4.4"
var APACHE_COMMONS_COMPRESS_VERSION = "1.26.1"
var APACHE_COMMONS_LANG_VERSION = "3.14.0"
var APACHE_POI_VERSION = "5.2.5"
var APACHE_TOMCAT_VERSION = "10.1.19"
var GOOGLE_AUTO_SERVICE_VERSION = "1.1.1"
var GOOGLE_ERROR_PRONE_VERSION = "2.25.0"
var GOOGLE_FIND_BUGS_VERSION = "3.0.2"
var GOOGLE_GSON_VERSION = "2.10.1"
var GOOGLE_GUAVA_VERSION = "33.0.0-jre"
var GOOGLE_TESTING_COMPILE_VERSION = "0.21.0"
var GOOGLE_TRUTH_VERSION = "1.4.2"
var HAMCREST_VERSION = "1.3"
var HIBERNATE_JPA_MODELGEN_VERSION = "6.3.1.Final"
var JSON_VERSION = "20240303"
var JSON_PATH_VERSION = "2.9.0"
var LOGBACK_VERSION = "1.5.3"
var LOMBOK_VERSION = "1.18.30"
var LOMBOK_MAPSTRUCT_VERSION = "0.2.0"
var MAPSTRUCT_VERSION = "1.5.5.Final"
var MODELMAPPER_VERSION = "3.2.0"
var OW2_ASM_VERSION = "9.6"
var POSTGRES_VERSION = "42.7.2"
var RESTASSURED_VERSION = "5.4.0"
var SNAKE_YAML_VERSION = "2.2"
var SPRING_BATCH_EXCEL_VERSION = "0.1.1"
var SPRING_CLOUD_AZURE_VERSION = "5.10.0"
var SPRINGDOC_VERSION = "2.4.0"
var SQUAREUP_JAVAPOET_VERSION = "1.13.0"
var TESTCONTAINERS_VERSION = "1.19.7"

dependencies {
    api(platform("org.testcontainers:testcontainers-bom:$TESTCONTAINERS_VERSION"))
    api(platform("com.azure.spring:spring-cloud-azure-dependencies:$SPRING_CLOUD_AZURE_VERSION"))
    constraints {

        api("org.apache.commons:commons-compress") {
            version {
                strictly("$APACHE_COMMONS_COMPRESS_VERSION")
            }
        }

        api("org.apache.commons:commons-collections4") {
            version {
                strictly("$APACHE_COMMONS_COLLECTIONS_VERSION")
            }
        }

        api("org.apache.commons:commons-lang3") {
            version {
                strictly("$APACHE_COMMONS_LANG_VERSION")
            }
        }

        api("org.apache.poi:poi") {
            version {
                strictly("$APACHE_POI_VERSION")
            }
        }

        api("org.apache.poi:poi-ooxml") {
            version {
                strictly("$APACHE_POI_VERSION")
            }
        }

        api("org.apache.tomcat.embed:tomcat-embed-core") {
            version {
                strictly("$APACHE_TOMCAT_VERSION")
            }
        }

        api("com.google.auto.service:auto-service") {
            version {
                strictly("$GOOGLE_AUTO_SERVICE_VERSION")
            }
        }

        api("com.google.code.findbugs:jsr305") {
            version {
                strictly("$GOOGLE_FIND_BUGS_VERSION")
            }
        }

        api("com.google.code.gson:gson") {
            version {
                strictly("$GOOGLE_GSON_VERSION")
            }
        }

        api("com.google.errorprone:error_prone_annotations") {
            version {
                strictly("$GOOGLE_ERROR_PRONE_VERSION")
            }
        }

        api("com.google.guava:guava") {
            version {
                strictly("$GOOGLE_GUAVA_VERSION")
            }
        }

        api("com.google.testing.compile:compile-testing") {
            version {
                strictly("$GOOGLE_TESTING_COMPILE_VERSION")
            }
        }

        api("com.google.truth:truth") {
            version {
                strictly("$GOOGLE_TRUTH_VERSION")
            }
        }

        api("org.hamcrest:hamcrest-all") {
            version {
                strictly("$HAMCREST_VERSION")
            }
        }

        api("org.hibernate:hibernate-jpamodelgen-jakarta") {
            version {
                strictly("$HIBERNATE_JPA_MODELGEN_VERSION")
            }
        }

        api("org.json:json") {
            version {
                strictly("$JSON_VERSION")
            }
        }

        api("com.jayway.jsonpath:json-path") {
            version {
                strictly("$JSON_PATH_VERSION")
            }
        }

        api("ch.qos.logback:logback-classic") {
            version {
                strictly("$LOGBACK_VERSION")
            }
        }

        api("ch.qos.logback:logback-core") {
            version {
                strictly("$LOGBACK_VERSION")
            }
        }

        api("org.projectlombok:lombok-mapstruct-binding") {
            version {
                strictly("$LOMBOK_MAPSTRUCT_VERSION")
            }
        }

        api("org.projectlombok:lombok") {
            version {
                strictly("$LOMBOK_VERSION")
            }
        }

        api("org.mapstruct:mapstruct") {
            version {
                strictly("$MAPSTRUCT_VERSION")
            }
        }

        api("org.mapstruct:mapstruct-processor") {
            version {
                strictly("$MAPSTRUCT_VERSION")
            }
        }

        api("org.modelmapper:modelmapper") {
            version {
                strictly("$MODELMAPPER_VERSION")
            }
        }

        api("org.ow2.asm:asm") {
            version {
                strictly("$OW2_ASM_VERSION")
            }
        }

        api("org.postgresql:postgresql") {
            version {
                strictly("$POSTGRES_VERSION")
            }
        }

        api("io.rest-assured:spring-mock-mvc") {
            version {
                strictly("$RESTASSURED_VERSION")
            }
        }

        api("org.yaml:snakeyaml") {
            version {
                strictly("$SNAKE_YAML_VERSION")
            }
        }

        api("org.springframework.batch.extensions:spring-batch-excel") {
            version {
                strictly("$SPRING_BATCH_EXCEL_VERSION")
            }
        }

        api("org.springdoc:springdoc-openapi-webmvc-core") {
            version {
                strictly("$SPRINGDOC_VERSION")
            }
        }

        api("org.springdoc:springdoc-openapi-starter-webmvc-ui") {
            version {
                strictly("$SPRINGDOC_VERSION")
            }
        }

        api("org.springdoc:springdoc-openapi-starter-webmvc-api") {
            version {
                strictly("$SPRINGDOC_VERSION")
            }
        }

        api("org.springdoc:springdoc-openapi-ui") {
            version {
                strictly("$SPRINGDOC_VERSION")
            }
        }

        api("com.squareup:javapoet") {
            version {
                strictly("$SQUAREUP_JAVAPOET_VERSION")
            }
        }

        api("org.testcontainers:testcontainers-bom") {
            version {
                strictly("$TESTCONTAINERS_VERSION")
            }
        }

    }
}

