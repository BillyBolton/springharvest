plugins {
}

allprojects {
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'java-library'
    apply plugin: "maven-publish"
    apply plugin: 'jacoco'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    bootJar {
        enabled = false
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    def javaVersion = "${JAVA_VERSION}"
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    compileJava {
        options.compilerArgs += [
                '-Amapstruct.defaultComponentModel=spring'
        ]
        options.encoding = "${OPTIONS_ENCODING}"
    }

    java {
        sourceCompatibility = "${JAVA_VERSION}"
        toolchain {
            languageVersion = JavaLanguageVersion.of("${JAVA_VERSION}")
        }
    }

    repositories {
        mavenCentral()
    }

    test {
        useJUnitPlatform()
        testLogging {
            outputs.upToDateWhen { false }
            showStandardStreams = false
        }
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        reports {
            xml.required.set(true)
            html.required.set(true)
        }
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        "**/models/**",
                        "**/constants/**",
                        "**/mappers/**",
                        "**/config/**",
                        "**/*Repository.*",
                        "**/*Mapper*.*",
                        "**/*Application.*"
                ])
            }))
        }
    }

    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/billybolton/springharvest")
                credentials {
                    username = project.findProperty("GPR_USER") ?: System.getenv("GITHUB_ACTOR")
                    password = project.findProperty("GPR_KEY") ?: System.getenv("GITHUB_TOKEN")
                }
            }
        }
        publications {
            gpr(MavenPublication) {
                from(components.java)
                pom {
                    packaging = "pom"
                    name = project.getName()
                    url = 'https://github.com/billybolton/springharvest'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'billybolton'
                            name = 'Billy Bolton'
                            email = 'billybolton16@gmail.com'
                            url = "https://www.github.com/billybolton"
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/billybolton/springharvest.git'
                        developerConnection = 'scm:git:ssh://github.com/billybolton/springharvest.git'
                        url = 'https://github.com/billybolton/springharvest/tree/master'
                    }
                }
            }
        }
    }
    dependencies {
        api platform(project(":dependency-management"))
        annotationProcessor platform(project(":dependency-management"))
        api 'org.springframework.boot:spring-boot-starter-actuator'
        api 'org.springframework.boot:spring-boot-starter-data-jpa'
        api 'org.springframework.boot:spring-boot-starter-web'
        api 'org.springframework.boot:spring-boot-starter-validation'
        api 'org.springframework.session:spring-session-core'
        api 'org.springframework.boot:spring-boot-docker-compose'

        api "org.mapstruct:mapstruct"
        compileOnly 'org.projectlombok:lombok'

        //  API documentation
        api "org.springdoc:springdoc-openapi-starter-webmvc-ui"
        api "org.springdoc:springdoc-openapi-starter-webmvc-api"

        // ANNOTATIONS:
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.projectlombok:lombok'
        annotationProcessor "org.mapstruct:mapstruct-processor"
        // required for binding mapstruct and lombok together
        annotationProcessor "org.projectlombok:lombok-mapstruct-binding"

        // TESTING:
        api 'org.springframework.boot:spring-boot-starter-data-jpa'
        api "org.mapstruct:mapstruct-processor"
        api "io.rest-assured:spring-mock-mvc"
        api "org.hamcrest:hamcrest-all"
        api 'org.springframework.boot:spring-boot-starter-test'
        api 'org.testcontainers:junit-jupiter'

        // SEARCH
        // For easier Specification Search
        annotationProcessor "org.hibernate.orm:hibernate-jpamodelgen"
        api "org.hibernate.orm:hibernate-jpamodelgen"

        api "org.modelmapper:modelmapper"

        api "org.apache.commons:commons-collections4"
        api "org.apache.commons:commons-lang3"

        // VULNERABILITY FIXES
        api "org.apache.tomcat.embed:tomcat-embed-core"
        api "org.yaml:snakeyaml"
        api "org.apache.commons:commons-compress"
        api "org.apache.commons:commons-compress"

        // For easier Specification Search
        api "org.hibernate.orm:hibernate-jpamodelgen"
        api "org.hibernate.orm:hibernate-jpamodelgen"
        api "org.hibernate.orm:hibernate-jpamodelgen"
    }
}