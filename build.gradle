plugins {
    id 'idea'
    id 'java-library'
    id "maven-publish"
    id 'org.sonarqube'
    id 'jacoco-report-aggregation'
}

Properties env = new Properties()
File subPropertiesFile = new File("$projectDir/env.properties")
subPropertiesFile.withInputStream {
    env.load(it)
}

ext.GRADLE_VERSION = env.getProperty("GRADLE_VERSION", "8.6")
ext.JAVA_VERSION = JavaVersion.toVersion(env.getProperty("JAVA_VERSION", "21.0.1"))
ext.JAVA_SOURCE_COMPATIBILITY = env.JAVA_VERSION
ext.JAVA_TARGET_COMPATIBILITY = env.JAVA_VERSION
ext.OPTIONS_ENCODING = env.getProperty("ENCODING", "UTF-8")

tasks.named("build") {
    description = 'Runs tests for all subprojects'
    dependsOn subprojects.collect { project ->
        if (project.pluginManager.hasPlugin('java') && !project.pluginManager.hasPlugin('java-library')) {
            project.tasks.findByName('build') ?: []
        } else {
            []
        }
    }.flatten()
}

sonar {
    def exclusions = ["**/errors/**", "**/models/**", "**/constants/**", "**/mappers/**", "**/config/**", "**/*Repository.*",
                      "**/*Mapper*.*", "**/*Application.*"]
    properties {
        property "sonar.projectKey", project.findProperty("SONAR_PROJECT_KEY") ?: System.getenv("SONAR_PROJECT_KEY")
        property "sonar.organization", project.findProperty("SONAR_ORGANIZATION") ?: System.getenv("SONAR_ORGANIZATION")
        property "sonar.token", project.findProperty("SONAR_TOKEN") ?: System.getenv("SONAR_TOKEN")
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.exclusions", exclusions
//        property "sonar.branch", "test-coverage"
    }
}

tasks.named("sonar") {
    dependsOn(tasks.named("test"))
}

tasks.named("test") {
    dependsOn subprojects.collect { project ->
        project.tasks.findByName('test') ?: []
    }.flatten()
    finalizedBy tasks.named("testCodeCoverageReport")
}


project(":dependency-management") {
    sonar {
        skipProject = true
    }
}


allprojects {
    apply plugin: 'jacoco'

    group = env.APPLICATION_GROUP
    version = env.APPLICATION_VERSION

    wrapper {
        gradleVersion = GRADLE_VERSION
        distributionType = Wrapper.DistributionType.ALL
    }

    repositories {
        mavenCentral()
    }

    if (file('secrets.gradle').exists()) {
        apply from: 'secrets.gradle'
    }


}

subprojects {
}
