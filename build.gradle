plugins {
    id 'idea'
    id 'java-library'
    id "maven-publish"
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'jacoco'
    id "org.sonarqube" version "4.3.1.3277"
    id 'org.owasp.dependencycheck' version '8.4.0'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

Properties env = new Properties()
File subPropertiesFile = new File("$projectDir/env.properties")
subPropertiesFile.withInputStream {
    env.load(it)
}

allprojects {
    group = env.getProperty("APPLICATION_GROUP")
    version = env.getProperty("APPLICATION_VERSION")

    java {
        sourceCompatibility = env.getProperty("JAVA_VERSION")
    }

    repositories {
        mavenCentral()
    }
}

tasks.named('sonar').configure {
    dependsOn test
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'java-library'
    apply plugin: "maven-publish"
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    apply plugin: 'org.sonarqube'
    apply plugin: 'org.owasp.dependencycheck'

    jacocoTestReport {
        reports {
            xml.required.set(true)
            html.required.set(true)
        }
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        "**/models/**",
                        "**/constants/**",
                        "**/mappers/**",
                        "**/config/**",
                        "**/errors/**",
                        "**/*Repository.*",
                        "**/*Mapper*.*",
                        "**/*Application.*"
                ])
            }))
        }
    }
    test.finalizedBy jacocoTestReport

    sonar {
        properties {
            property "sonar.projectKey", "BillyBolton_springharvest"
            property "sonar.organization", "billybolton"
            property "sonar.host.url", "https://sonarcloud.io"
            property "sonar.exclusions", "**/*Generated.java"
        }
    }

    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/billybolton/springharvest")
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                    password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
                }
            }
        }
        publications {
            gpr(MavenPublication) {
                from(components.java)
            }
        }
    }

    ext {
        set('testcontainersVersion', "1.17.6")
        HAMCREST_VERSION = "1.3"
        LOMBOK_MAPSTRUCT_VERSION = "0.2.0"
        MAPSTRUCT_VERSION = "1.5.3.Final"
        RESTASSURED_VERSION = "5.3.0"
        SPRINGDOC_VERSION = "2.0.2"
        TESTCONTAINERS_VERSION = "1.17.6"
    }

    dependencyManagement {
        imports {
            mavenBom "org.testcontainers:testcontainers-bom:$TESTCONTAINERS_VERSION"
        }
    }

    dependencies {
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        api 'org.springframework.boot:spring-boot-starter-actuator'
        api 'org.springframework.boot:spring-boot-starter-data-jpa'
        api 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        api 'org.springframework.session:spring-session-core'

        api "org.mapstruct:mapstruct:$MAPSTRUCT_VERSION"
        compileOnly 'org.projectlombok:lombok'

        //  API documentation
        api "org.springdoc:springdoc-openapi-starter-webmvc-ui:$SPRINGDOC_VERSION"
        api "org.springdoc:springdoc-openapi-starter-webmvc-api:$SPRINGDOC_VERSION"

        // ANNOTATIONS:
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.projectlombok:lombok'
        annotationProcessor "org.mapstruct:mapstruct-processor:$MAPSTRUCT_VERSION"
        // required for binding mapstruct and lombok together
        annotationProcessor "org.projectlombok:lombok-mapstruct-binding:$LOMBOK_MAPSTRUCT_VERSION"

        // TESTING:
        testImplementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        testAnnotationProcessor "org.mapstruct:mapstruct-processor:$MAPSTRUCT_VERSION"
        testImplementation "io.rest-assured:spring-mock-mvc:$RESTASSURED_VERSION"
        testImplementation "org.hamcrest:hamcrest-all:$HAMCREST_VERSION"
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.testcontainers:junit-jupiter'

        // SEARCH
        // For easier Specification Search
        annotationProcessor 'org.hibernate:hibernate-jpamodelgen-jakarta:5.6.14.Final'
        implementation 'org.hibernate:hibernate-jpamodelgen-jakarta:5.6.14.Final'

        // Batch Processing
        implementation 'org.springframework.boot:spring-boot-starter-batch'
        implementation 'org.springframework.batch.extensions:spring-batch-excel:0.1.1'

        implementation 'org.modelmapper:modelmapper:3.1.1'

        implementation 'org.apache.commons:commons-collections4:4.4'
        implementation 'org.apache.commons:commons-lang3:3.13.0'
    }
}

wrapper {
    gradleVersion = "8.2.1"
    distributionType = Wrapper.DistributionType.ALL
}